{"version":3,"sources":["helpers/validation.js","components/LawyersList/LawyersList.js","App.js","reportWebVitals.js","index.js"],"names":["validatorState","state","switchStates","value","result","includes","split","map","trim","length","toUpperCase","join","validatorSameLawer","arr","el","findIndex","item","id","phone","email","toLowerCase","validatorDate","date","currentDate","Date","someDate","correctFormat","test","getTime","LawyersList","contacts","className","contact","i","array","name","classNames","age","num","experience","income","toFixed","isChildren","states","expiration","license","App","useState","setContacts","validFile","setVaidFile","inputFileRef","useRef","undefined","href","src","alt","type","accept","ref","style","display","onChange","event","Object","keys","target","files","reader","FileReader","onload","text","parse","header","data","reduce","prev","filter","list","lawer","index","padStart","readAsText","onClick","current","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bee8cbb2.chunk.js","sourcesContent":["export const isInteger = (num) => ((num ^ 0) === num);\n\nexport const validatorState = (state) => {\n  const switchStates = (value) => {\n    let result;\n\n    switch(value) {\n      case 'alabama': result = 'AL';\n        break;\n      case 'alaska': result = 'AK';\n        break;\n      case 'arizona': result = 'AZ';\n        break;\n      case 'arkansas': result = 'AR';\n        break;\n      case 'california': result = 'CA';\n        break;\n      case 'colorado': result = 'CO';\n        break;\n      case 'connecticut': result = 'CT';\n        break;\n      case 'delaware': result = 'DE';\n        break;\n      case 'florida': result = 'FL';\n        break;\n      case 'georgia': result = 'GA';\n        break;\n      case 'hawaii': result = 'HI';\n        break;\n      case 'idaho': result = 'ID';\n        break;\n      case 'illinois': result = 'IL';\n        break;\n      case 'indiana': result = 'IN';\n        break;\n      case 'iowa': result = 'IA';\n        break;\n      case 'kansas': result = 'KS';\n        break;\n      case 'kentucky': result = 'KY';\n        break;\n      case 'louisiana': result = 'LA';\n        break;\n      case 'maine': result = 'ME';\n        break;\n      case 'maryland': result = 'MD';\n        break;\n      case 'massachusetts': result = 'MA';\n        break;\n      case 'michigan': result = 'MI';\n        break;\n      case 'minnesota': result = 'MN';\n        break;\n      case 'mississippi': result = 'MS';\n        break;\n      case 'missouri': result = 'MO';\n        break;\n      case 'montana': result = 'MT';\n        break;\n      case 'nebraska': result = 'NE';\n        break;\n      case 'nevada': result = 'NV';\n        break;\n      case 'new hampshire': result = 'NH';\n        break;\n      case 'new jersey': result = 'NJ';\n        break;\n      case 'new mexico': result = 'NM';\n        break;\n      case 'new york': result = 'NY';\n        break;\n      case 'north carolina': result = 'NC';\n        break;\n      case 'north dakota': result = 'ND';\n        break;\n      case 'ohio': result = 'OH';\n        break;\n      case 'oklahoma': result = 'OK';\n        break;\n      case 'oregon': result = 'OR';\n        break;\n      case 'pennsylvania': result = 'PA';\n        break;\n      case 'rhode island': result = 'RI';\n        break;\n      case 'south carolina': result = 'SC';\n        break;\n      case 'south dakota': result = 'SD';\n        break;\n      case 'tennessee': result = 'TN';\n        break;\n      case 'texas': result = 'TX';\n        break;\n      case 'utah': result = 'UT';\n        break;\n      case 'vermont': result = 'VT';\n        break;\n      case 'virginia': result = 'VA';\n        break;\n      case 'washington ': result = 'WA';\n        break;\n      case 'west virginia': result = 'WV';\n        break;\n      case 'wisconsin': result = 'WI';\n        break;\n      case 'wyoming': result = 'WY';\n        break;\n\n      default: result = \"Wrong states name\";\n    }    \n    return result;\n  } \n  \n  if(state.includes(',')){\n    let states = state.split(',').map(state => state.trim());    \n\n    let validatedStates = states\n      .map(state => ((state.length > 2) ? switchStates(state) : state.toUpperCase()))\n      .join(' | ');\n\n    return validatedStates;\n  }  \n\n  if(state.length > 2) {\n    return switchStates(state);    \n  }      \n};\n\nexport const validatorSameLawer = (arr, el) => {\n  let result =\n  (arr.findIndex(item => (\n    item.id === el.id \n      ? false \n      : (item.phone === el.phone) || (item.email.toLowerCase() === el.email.toLowerCase())\n  ))\n  ) + 1;\n\n return (result === 0) ? '' : result;\n}\n\nexport const validatorDate = (date) => {\n  let currentDate = new Date();\n  let someDate = new Date(date);\n\n  const correctFormat = (/\\d{2}[/]\\d{2}[/]\\d{4}/.test(date)) || (/\\d{4}-\\d{2}-\\d{2}/.test(date));  \n\n  return ((someDate.getTime() > currentDate.getTime())) && correctFormat;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { isInteger, validatorSameLawer, validatorDate } from '../../helpers/validation';\nimport './LawyersList.scss';\n\nexport const LawyersList = ({contacts}) => (  \n  contacts.length > 0 &&\n    <section className=\"list\">\n      <table className=\"table list__table\">\n        <thead>\n          <tr >\n            <th className=\"table__row\">ID</th>\n            <th className=\"table__row\">Full Name</th>\n            <th className=\"table__row\">Phone</th>\n            <th className=\"table__row\">Email</th>\n            <th className=\"table__row\">Age</th>\n            <th className=\"table__row\">Experience</th>\n            <th className=\"table__row\">Yearly Income</th>\n            <th className=\"table__row\">Has children</th>\n            <th className=\"table__row\">License states</th>\n            <th className=\"table__row\">Expiration date</th>\n            <th className=\"table__row\">License number</th>\n            <th className=\"table__row\">Dublicate with</th>\n          </tr>\n        </thead>\n        <tbody>            \n          {contacts                              \n            .map((contact, i, array) => (\n              <tr key = {contact.id}>\n                <td className=\"table__row\">{contact.id}</td>\n                <td className=\"table__row\">{contact.name}</td>\n                <td\n                    className={classNames({\n                    \"table__row\": true,\n                    \"table__row--invalid\": contact.phone === \"Wrong phone number\",\n                  })}\n                >{contact.phone}</td>\n\n                <td \n                  className={classNames({\n                    \"table__row\": true,\n                    \"table__row--invalid\": !/^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/.test(contact.email),\n                  })}\n                >\n                  {contact.email}\n                </td>\n\n                <td \n                  className={classNames({\n                    \"table__row\": true,\n                    \"table__row--invalid\": (contact.age < 21 || !isInteger(contact.age)),\n                  })}\n                >\n                  {contact.age}\n                </td>\n\n                <td \n                className={classNames({\n                  \"table__row\": true,\n                  \"table__row--invalid\": (contact.experience < 0 || contact.experience > contact.age) ,\n                })}  \n                >\n                  {contact.experience}\n                </td>\n\n                <td \n                  className={classNames({\n                    \"table__row\": true,\n                    \"table__row--invalid\": (contact.income > 1000000 || contact.income < 0),\n                  })}                      \n                >\n                  {contact.income.toFixed(2)}\n                </td>\n\n                <td \n                  className={classNames({\n                    \"table__row\": true,\n                    \"table__row--invalid\": (contact.isChildren !== 'TRUE' && contact.isChildren !== 'FALSE'),\n                  })}         \n                >\n                  {contact.isChildren}\n                </td>\n\n                <td \n                  className={classNames({\n                    \"table__row\": true,\n                    \"table__row--invalid\": (contact.states === 'Wrong states name' || contact.states === ''),\n                  })}  \n                >                    \n                  {contact.states}\n                </td>\n\n                <td \n                  className={classNames({\n                    \"table__row\": true,                        \n                    \"table__row--invalid\": !validatorDate(contact.expiration),\n                  })}  \n                >\n                  {contact.expiration}\n                </td>\n\n                <td \n                  className={classNames({\n                    \"table__row\": true,\n                    \"table__row--invalid\": (!/\\w{6}/.test(contact.license) || contact.license.length !== 6),\n                  })}                     \n                >{contact.license}</td>\n\n                <td className=\"table__row\">\n                  {validatorSameLawer(array, contact)}\n                </td>\n              </tr>\n            ))            \n          }            \n        </tbody>\n      </table>\n    </section>    \n);\n\nLawyersList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      phone :PropTypes.string.isRequired,\n      email :PropTypes.string.isRequired,      \n      income :PropTypes.number,\n      isChildren :PropTypes.string,\n      states :PropTypes.string,\n      expiration :PropTypes.string,\n      license :PropTypes.string,\n      id :PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n}\n","import React, { useState, useRef } from 'react';\nimport {parse} from 'papaparse';\nimport './App.scss';\nimport { LawyersList } from './components/LawyersList/LawyersList';\nimport { validatorState } from './helpers/validation';\n\nfunction App() {  \n  const [contacts, setContacts] = useState([]);\n  const [validFile, setVaidFile] = useState(true);\n  const inputFileRef = useRef(undefined);\n\n  const handleChange = (event) => {\n    if (Object.keys(event.target.files).length === 0) return; \n\n    const reader = new FileReader();\n    \n    reader.onload = function () {      \n      const text = reader.result.toLowerCase();\n      const result = parse(text, {header: true});\n      \n      const columns = Object.keys(result.data[0]);\n      let amountNeededColumns = columns.reduce((prev, item) => (\n        prev + (((item === 'full name') || (item === 'phone') || (item === 'email')) ? 1 : 0) \n      ), 0);\n\n      if (amountNeededColumns < 3) {\n        setVaidFile(false);\n      } else {\n          setVaidFile(true);\n\n          setContacts(result.data\n            .filter(list => (list['full name']))\n            .map((lawer, index) => ({        \n              name: lawer['full name'].trim().toUpperCase(),\n              phone: (lawer['phone'].trim().length >= 10) ? lawer['phone'].trim().padStart(12, '+1') : \"Wrong phone number\",\n              email: lawer['email'].trim(), \n              age: lawer['age'] ? +lawer['age'] : '', \n              experience: lawer['experience'] ? +lawer['experience'] : '', \n              income: lawer['yearly income'] ? +lawer['yearly income'] : 0, \n              isChildren: lawer['has children'] ? lawer['has children'].trim().toUpperCase() : 'FALSE',               \n              states: lawer['license states'] ? validatorState(lawer['license states'].trim()) : '',             \n              expiration: lawer['expiration date'] ? lawer['expiration date'].trim() : '',         \n              license: lawer['license number'] ? lawer['license number'].trim() : '',  \n              id: index + 1,      \n          })));\n        }          \n    };\n    reader.readAsText(event.target.files[0]);\n  };  \n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <a className=\"header__logo\" href=\"https://www.radency.com/\">\n          <img \n            src=\"logo.png\"\n            alt=\"radency\"\n        ></img>\n        </a>\n        <p className=\"header__title\">software engineering</p>\n      </header>\n\n      <main className=\"main\">\n        <h1 className=\"main__title\">List of lawyers</h1>     \n\n        <input \n          type=\"file\"\n          accept=\".csv\"\n          ref={inputFileRef}\n          style={{display: \"none\"}}\n          onChange={handleChange}\n        />      \n        <br/>\n        <button\n          className=\"main__file-selector\"\n          onClick={() => {\n            inputFileRef.current.click()\n          }}\n        >\n          Import users\n        </button>\n        \n        {validFile \n          ? <LawyersList contacts = {contacts}/> \n          : <p className=\"main__invalid\">File format is not correct</p>\n        }    \n      </main>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}